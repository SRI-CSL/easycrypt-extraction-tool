
module extraction.Pervasive

prelude "let iteri = fun n f st -> let st = ref st in let i = ref Z.zero in while (Z.lt !i n) do st := f !i !st ; i := Z.add !i Z.one done ; !st\n"
prelude "let logical_equality = fun x y -> x = y\n"
prelude "let witness = Obj.magic None\n"

syntax val tt "()"
syntax type distr "%1"
syntax val logical_equality "logical_equality"
syntax val iteri "iteri"
syntax val witness "witness"

end

module extraction.AGroup

prelude "let n = ref Z.one (* FILL ME! *)\n"

prelude "let agadd = fun a b -> Z.erem (Z.add a b) !n\n"
prelude "let agumin = fun a -> Z.erem (Z.neg a) !n\n"
prelude "let agsub = fun a b -> Z.erem (Z.sub a b) !n\n"
prelude "let atoint = fun a -> a\n"
prelude "let aofint = fun a -> Z.erem a !n\n"

syntax val n "!n"
syntax type agroup "Z.t"
syntax val ( + ) "agadd %1 %2"
syntax val zero "Z.zero"
syntax val ( -_ ) "agumin %1"
syntax val ( - ) "agsub %1 %2"
syntax val atoint "atoint"
syntax val aofint "aofint"

end

module extraction.MGroup

prelude "let order = ref Z.one (* FILL ME! *)\n"

prelude "let mgmul = fun a b -> Z.erem (Z.mul a b) !n\n"
prelude "let mginv = fun a -> (Z.invert a !n)\n"
prelude "let mgdiv = fun a b -> Z.erem (Z.div a b) !n\n"
prelude "let mgpow = fun a b -> Z.powm a b !n\n"
prelude "let mtoint = fun a -> a\n"
prelude "let mofint = fun a -> Z.erem a !n\n"

syntax type mgroup "Z.t"
syntax val ( * ) "mgmul %1 %2"
syntax val inv "mginv %1"
syntax val ( / ) "mgdiv %1 %2"
syntax val ( ^ ) "mgpow %1 %2"
syntax val mtoint "mtoint"
syntax val mofint "mofint"

end

module extraction.Composite

prelude "let p = ref (Z.of_int 11) (* FILL ME! *)\n"
prelude "let q = ref (Z.of_int 17) (* FILL ME! *)\n"

prelude "let mn2gmul = fun a b -> Z.erem (Z.mul a b) (Z.pow !n 2)\n"
prelude "let mn2ginv = fun a -> (Z.invert a (Z.pow !n 2))\n"
prelude "let mn2gdiv = fun a b -> Z.erem (Z.div a b) (Z.pow !n 2)\n"
prelude "let mn2gpow = fun a b -> Z.powm a b (Z.pow !n 2)\n"
prelude "let mn2toint = fun a -> a\n"
prelude "let mn2ofint = fun a -> Z.erem a (Z.pow !n 2)\n"

syntax val p "!p"
syntax val q "!q"

syntax type mn2_group "Z.t"
syntax val ( * ) "mn2gmul %1 %2"
syntax val inv "mn2ginv %1"
syntax val ( / ) "mn2gdiv %1 %2"
syntax val ( ^ ) "mn2gpow %1 %2"
syntax val mn2toint "mn2toint"
syntax val mn2ofint "mn2ofint"

end