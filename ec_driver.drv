printer "ocaml"

module extraction.Pervasive

prelude "let iteri = fun n f st -> let st = ref st in let i = ref Z.zero in while (Z.lt !i n) do st := f !i !st ; i := Z.add !i Z.one done ; !st\n"
prelude "let logical_equality = fun x y -> x = y\n"

syntax val tt "()"
syntax type distr "%1"
syntax val logical_equality "%1 = %2"
syntax val iteri "iteri"
syntax val witness "(Obj.magic None)"

end

module extraction.PrimeField

prelude "let fmul = fun a b -> Z.erem (Z.mul a b) !q\n"
prelude "let fadd = fun a b -> Z.erem (Z.add a b) !q\n"
prelude "let fumin = fun a -> Z.erem (Z.neg a) !q\n"
prelude "let finv = fun a -> Z.erem (Z.neg a) !q\n"
prelude "let fsub = fun a b -> Z.erem (Z.sub a b) !q\n"
prelude "let fdiv = fun a b -> Z.erem (Z.mul a (Z.invert b !q)) !q\n"
prelude "let fexp = fun a b -> Z.powm a b !q\n"

prelude "let dt : unit -> Z.t = fun _ -> Z.rem (Z.of_bits (Cryptokit.Random.string Cryptokit.Random.secure_rng 128)) !q\n"

prelude "let q = ref Z.one (* FILL ME! *)\n"

syntax val q "!q"
syntax type t "Z.t"
syntax val fzero "Z.zero"
syntax val fone "Z.one"
syntax val fmul "fmul"
syntax val fadd "fadd"
syntax val fumin "fumin"
syntax val finv "finv"
syntax val fsub "fsub"
syntax val fdiv "fdiv"
syntax val fexp "fexp"


end